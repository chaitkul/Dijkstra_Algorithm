# Importing all the necessary libraries

import numpy as np
import heapq
import cv2

# Creating an empty array from node (0,0) to (600,250)

graph = np.empty((250,600), dtype=object)

for y in range(250):
    for x in range(600):
        graph[y,x] = (x,y)

def move_right(current_node, cost=1): # Function to move the point robot one step to the right
    x,y = current_node
    if x<600:
        child_node = (x+1,y)
        return child_node, cost

def move_left(current_node, cost=1): # Function to move the point robot one step to the left
    x,y = current_node
    if x>0:
        child_node = (x-1,y)
        return child_node, cost

def move_up(current_node, cost=1): # Function to move the point robot one step up
    x,y = current_node
    if y>0:
        child_node = (x,y-1)
        return child_node, cost

def move_down(current_node, cost=1): # Function to move the point robot one step down
    x,y = current_node
    if y<250:
        child_node = (x,y+1)
        return child_node, cost

def move_up_right(current_node, cost=1.4): # Function to move the point robot one step up and one step to the right
    x,y = current_node
    if y>0 and x<600:
        child_node = (x+1,y-1)
        return child_node, cost

def move_down_right(current_node, cost=1.4): # Function to move the point robot one step down and one step to the right
    x,y = current_node
    if y<250 and x<600:
        child_node = (x+1,y+1)
        return child_node, cost

def move_up_left(current_node, cost=1.4): # Function to move the point robot one step up and one step to the left
    x,y = current_node
    if y>0 and x>0:
        child_node = (x-1,y-1)
        return child_node, cost

def move_down_left(current_node, cost=1.4): # Function to move the point robot one step down and one step to the left
    x,y = current_node
    if y<250 and x>0:
        child_node = (x-1,y+1)
        return child_node, cost
        
# Creating a list of action set that consists of all the 8 moves

action_set = [move_right, move_left, move_up, move_down, move_up_right, move_down_right, move_up_left, move_down_left]

# Creating the map using OpenCV

def make_canvas():
    canvas = np.zeros((250, 600, 3), dtype="uint8")

    blue = (255,0,0)
    red = (0,0,255)

    # Obstacle rectangles

    cv2.rectangle(canvas, (95,0), (155,105), red, thickness=-1)
    cv2.rectangle(canvas, (95,145), (155,250), red, thickness=-1)
    cv2.rectangle(canvas, (100, 0), (150,100), blue, thickness=-1)
    cv2.rectangle(canvas, (100,150), (150,250), blue, thickness=-1)

    # Obstacle triangle

    pt1 = (460,25)
    pt2 = (460,225)
    pt3 = (510,125)
    pt4 = (455,246)
    pt5 = (455,4)
    pt6 = (515,125)

    # Drawing 3 lines to crate a triangle

    cv2.line(canvas, pt1, pt2, blue, 1)
    cv2.line(canvas, pt2, pt3, blue, 1)
    cv2.line(canvas, pt3, pt1, blue, 1)
    cv2.line(canvas, pt4, pt5, red, 1)
    cv2.line(canvas, pt5, pt6, red, 1)
    cv2.line(canvas, pt6, pt4, red, 1)

    # Using the fillPoly function to fill the obstacle space

    points1 = np.array([[455,246],[455,4],[515,125]])
    points1 = points1.reshape((-1,1,2))
    cv2.fillPoly(canvas, [points1], red)

    points2 = np.array([[510,125],[460,225],[460,25]])
    points2 = points2.reshape((-1,1,2))
    cv2.fillPoly(canvas, [points2], blue)

    # Obstacle hexagon

    center = (300,125)
    side_length = 75

    # Drawing six lines to create a hexagon

    pts3 = []
    for i in range(6):
        angle_deg = 60 * i
        angle_rad = np.pi / 180 * (angle_deg + 90)
        pt = (int(center[0] + side_length * np.cos(angle_rad)),
            int(center[1] + side_length * np.sin(angle_rad)))
        pts3.append(pt)

    for i in range(6):
        cv2.line(canvas, pts3[i], pts3[(i+1)%6], blue, 1)

    center = (300,125)
    side_length = 81

    pts4 = []
    for i in range(6):
        angle_deg = 60 * i
        angle_rad = np.pi / 180 * (angle_deg + 90)
        pt = (int(center[0] + side_length * np.cos(angle_rad)),
            int(center[1] + side_length * np.sin(angle_rad)))
        pts4.append(pt)

    for i in range(6):
        cv2.line(canvas, pts4[i], pts4[(i+1)%6], red, 1)

    # Using the fillPoly function to fill the obstacle space

    points4 = np.array([[230,85],[230,165],[300,206],[370,165],[370,85],[300,44]])
    points4 = points4.reshape((-1,1,2))
    cv2.fillPoly(canvas, [points4], red)

    points3 = np.array([[300,200],[235,162],[235,87],[300,50],[364,87],[364,162]])
    points3 = points3.reshape((-1,1,2))
    cv2.fillPoly(canvas, [points3], blue)

    # Finding all the nonzero pixels from the canvas and appending them to the list of obstacle points

    obstacle = []
    for y in range(canvas.shape[0]):
        for x in range(canvas.shape[1]):
            if canvas[y,x].any():
                obstacle.append((x,y))

    # Returning the obstacle space and the canvas image

    return obstacle, canvas

obstacle, canvas = make_canvas()

# Taking the user input for the coordinates of the start node and the goal node
# It will iterate if the start or goal node is in obstacle space or beyond the scope of the map

def user_input():
    valid_input = False
    while valid_input == False:
        start_x = int(input("Enter X coordinate of start node: "))
        start_y = int(input("Enter Y coordinate of start node: "))
        goal_x = int(input("Enter X coordinate of goal node: "))
        goal_y = int(input("Enter Y coordinate of goal node: "))
        
        start_node = (start_x,250-start_y)
        goal_node = (goal_x,250-goal_y)
    
        if start_node in obstacle:
            print(f"Start node {start_node} is in obstacle space. Enter another node.") # Error message if start node is in obstacle space
            valid_input = False
        elif goal_node in obstacle:
            print(f"Goal node {goal_node} is in obstacle space. Enter another node") # Error message if goal node is in obstacle space
            valid_input = False
        elif start_x<0 or start_x>600 or goal_x<0 or goal_x>600 or start_y<0 or start_y>250 or goal_y<0 or goal_y>250:
            print("The coordinates you entered are beyond the scope of the map. Enter valid start and goal coordinates.") # Error message if start or goal node is beyond the scope of the map
            valid_input = False
        elif start_node not in obstacle and goal_node not in obstacle:
            valid_input = True
            break
        
    return start_node, goal_node

start_node, goal_node = user_input()

# Creating an open list and a closed dictionary

closed_dict = {}
open_list = []

current_node = start_node

# Dijkstra Algorithm Implementation

def dijkstra(start_node, goal_node):
    heapq.heappush(open_list, (0, start_node))
    closed_dict[start_node] = (start_node, None, 0)

    while open_list:

        cumulative_cost, current_node = heapq.heappop(open_list) # Appending the cost and the node information into the open list
        if current_node == goal_node:
            print("Success! Goal node reached") # Print meesage if goal node is found
            break
        if current_node in closed_dict and closed_dict[current_node][2] < cumulative_cost: # If existing cost to come is less than new cost then don't update cost and parent information
            continue
        for move in action_set: # Creating child nodes by using the action set
            try:
                child_node, cost = move(current_node)
                if child_node is not None and child_node not in closed_dict and child_node not in obstacle: # Adding child node to closed list if it is not present already
                    heapq.heappush(open_list,(cumulative_cost + cost, child_node))
                    closed_dict[child_node]=(child_node, current_node, cumulative_cost + cost)
                    cv2.circle(canvas, closed_dict[child_node][0], 1, (255,255,255), 1) # Displaying the explored nodes on canvas
                    cv2.imshow("canvas", canvas) # Displaying the explored nodes on canvas
                    cv2.waitKey(1)
                elif child_node in closed_dict and closed_dict[child_node][2] > (cumulative_cost + cost) and child_node not in obstacle and child_node is not None:
                    closed_dict[child_node]=(child_node, current_node, cumulative_cost + cost) # If node is present in closed list and new cost is less than existing cost, update the cost and parent information
            except:
                pass

dijkstra(start_node, goal_node)

# Backtracking to the start node when goal node is found

def generate_path(start_node, goal_node):
    backtrack_path = []
    current_node = goal_node
    while closed_dict[current_node][0] != closed_dict[start_node][0]:
        backtrack_path.append((closed_dict[current_node][0], round(closed_dict[current_node][2],1)))
        current_node = closed_dict[current_node][1]
    backtrack_path.append((closed_dict[start_node][0], round(closed_dict[start_node][2],1)))
    backtrack_path.reverse()
    for node in backtrack_path:
        cv2.circle(canvas, node[0], 3, (0,255,255), 1) 
        cv2.imshow("canvas", canvas) # Displaying the path from start node to goal node
        cv2.waitKey(25)

    return backtrack_path

path = generate_path(start_node, goal_node)
print(path)
distance=closed_dict[goal_node][2]
print(f"Distance = {round(distance)}")
